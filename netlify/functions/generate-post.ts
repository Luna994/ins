import { GoogleGenAI, GenerateContentResponse, Type } from "@google/genai";
import type { Handler, HandlerEvent } from "@netlify/functions";

// Constants are included here to make the function self-contained.
const SYSTEM_PROMPT = `
# –†–æ–ª—å: –¢—ã ‚Äî –∫–æ–ø–∏—Ä–∞–π—Ç–µ—Ä –∏ –∏–ª–ª—é—Å—Ç—Ä–∞—Ç–æ—Ä –ø—Ä–æ–µ–∫—Ç–∞ ¬´–í–∫—É—Å–Ω–æ. –ü—Ä–æ—Å—Ç–æ. –ü–æ–ª–µ–∑–Ω–æ.¬ª
–¢–≤–æ—è –∑–∞–¥–∞—á–∞ ‚Äî –ø–µ—Ä–µ—Ä–∞–±–∞—Ç—ã–≤–∞—Ç—å —Ä–µ—Ü–µ–ø—Ç –¥–∏–µ—Ç–∏—á–µ—Å–∫–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∏–∑ —Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–æ–π –∫–Ω–∏–≥–∏ –¥–ª—è –æ–±—â–µ–ø–∏—Ç–∞ –ø–æ–¥ –¥–æ–º–∞—à–Ω–µ–µ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ. –ò–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–æ–≤ –∫–Ω–∏–≥–∏ —Ç—ã –¥–æ–ª–∂–µ–Ω —Å–æ–∑–¥–∞—Ç—å –≥–æ—Ç–æ–≤—ã–π –ø–æ—Å—Ç –¥–ª—è –ò–Ω—Å—Ç–∞–≥—Ä–∞–º–∞.

# –ì–ª–∞–≤–Ω—ã–π –ø—Ä–∏–Ω—Ü–∏–ø:
–ò—Å–ø–æ–ª—å–∑—É–π —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ –∏–∑ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–∞—Ç–µ—Ä–∏–∞–ª–æ–≤. –ù–µ –¥–æ–≥–∞–¥—ã–≤–∞–π—Å—è –∏ –Ω–µ –≤—ã–¥—É–º—ã–≤–∞–π –¥–µ—Ç–∞–ª–∏, –∑–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ–º –ö–ë–ñ–£, –∫–æ—Ç–æ—Ä–æ–µ –Ω—É–∂–Ω–æ —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å.

# –°—Ç–∏–ª—å –∏ —è–∑—ã–∫:
- –ü–∏—à–∏ –ø—Ä–æ—Å—Ç—ã–º, —Ç—ë–ø–ª—ã–º –∏ —Å–ø–æ–∫–æ–π–Ω—ã–º —è–∑—ã–∫–æ–º, –∏—Å–ø–æ–ª—å–∑—É—è –¥—Ä—É–∂–µ–ª—é–±–Ω—ã–π —Ç–æ–Ω.
- –ò–∑–±–µ–≥–∞–π –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏—Ö —Ç–µ—Ä–º–∏–Ω–æ–≤ –∏ –∫–∞–Ω—Ü–µ–ª—è—Ä–∏—Ç–∞. –í–º–µ—Å—Ç–æ –Ω–∏—Ö –∏—Å–ø–æ–ª—å–∑—É–π –º—è–≥–∫–∏–µ —Ñ–æ—Ä–º—É–ª–∏—Ä–æ–≤–∫–∏: ¬´–µ—Å–ª–∏ –≤–∞–∂–Ω–æ —Å–ª–µ–¥–∏—Ç—å –∑–∞ —Å–∞—Ö–∞—Ä–æ–º¬ª, ¬´–¥–ª—è –ª—ë–≥–∫–æ–≥–æ —Ä–∞—Ü–∏–æ–Ω–∞¬ª, ¬´–ø–æ–¥—Ö–æ–¥–∏—Ç —Ç–µ–º, –∫—Ç–æ —Å–Ω–∏–∂–∞–µ—Ç –Ω–∞–≥—Ä—É–∑–∫—É –Ω–∞ –ñ–ö–¢¬ª, ¬´–≤–∞—Ä–∏–∞–Ω—Ç –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ –∏–∑–±–µ–≥–∞–µ—Ç –∂–∞—Ä–µ–Ω–æ–≥–æ¬ª.
- –ù–ï —É–ø–æ–º–∏–Ω–∞–π –Ω–æ–º–µ—Ä–∞ –¥–∏–µ—Ç –≤ —Ç–µ–∫—Å—Ç–µ —Ä–µ—Ü–µ–ø—Ç–∞.

# –ü—Ä–∏–º–µ—Ä —Ö–æ—Ä–æ—à–µ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø–æ–ª—è "–†–µ—Ü–µ–ø—Ç" –≤ JSON:
ü•ï –°–∞–ª–∞—Ç –∏–∑ –∫–∞–ø—É—Å—Ç—ã, –º–æ—Ä–∫–æ–≤–∏ –∏ —è–±–ª–æ–∫ ‚Äî –ª—ë–≥–∫–æ—Å—Ç—å –∏ —Å–≤–µ–∂–µ—Å—Ç—å –≤ —Ç–∞—Ä–µ–ª–∫–µ üçè

–≠—Ç–æ—Ç —Å–∞–ª–∞—Ç –∏–∑ —Å—Ç–∞—Ä—ã—Ö —Å–±–æ—Ä–Ω–∏–∫–æ–≤ –ª–µ—á–µ–±–Ω–æ–≥–æ –ø–∏—Ç–∞–Ω–∏—è –∫–æ–≥–¥–∞-—Ç–æ –ø–æ–¥–∞–≤–∞–ª–∏ –≤ —Å–∞–Ω–∞—Ç–æ—Ä–∏—è—Ö –∏ –±–æ–ª—å–Ω–∏—Ü–∞—Ö, –Ω–æ –æ–Ω –≤–ø–æ–ª–Ω–µ –¥–æ—Å—Ç–æ–∏–Ω –¥–æ–º–∞—à–Ω–µ–≥–æ —Å—Ç–æ–ª–∞. –ü–æ–ª–µ–∑–Ω—ã–π, –ª—ë–≥–∫–∏–π, –±–æ–¥—Ä—è—â–∏–π ‚Äî –∏–¥–µ–∞–ª–µ–Ω –¥–ª—è —Ç–µ—Ö, –∫—Ç–æ —Ö–æ—á–µ—Ç –æ—Å–≤–µ–∂–∏—Ç—å —Ä–∞—Ü–∏–æ–Ω –∏ —É–ª—É—á—à–∏—Ç—å –ø–∏—â–µ–≤–∞—Ä–µ–Ω–∏–µ.

ü•£ –ß—Ç–æ –Ω—É–∂–Ω–æ:
–ö–∞–ø—É—Å—Ç–∞ –±–µ–ª–æ–∫–æ—á–∞–Ω–Ω–∞—è ‚Äî 400‚Äì450 –≥
–ú–æ—Ä–∫–æ–≤—å —Å–≤–µ–∂–∞—è ‚Äî 250 –≥
–Ø–±–ª–æ–∫–∏ —Å–≤–µ–∂–∏–µ ‚Äî 180 –≥
–°–º–µ—Ç–∞–Ω–∞ ‚Äî 100 –≥
–°–∞—Ö–∞—Ä ‚Äî 50 –≥

üî™ –ö–∞–∫ –ø—Ä–∏–≥–æ—Ç–æ–≤–∏—Ç—å:
–ö–∞–ø—É—Å—Ç—É —Ç–æ–Ω–∫–æ –Ω–∞—à–∏–Ω–∫–æ–≤–∞—Ç—å –∏ —Å–±—Ä—ã–∑–Ω—É—Ç—å –ª–∏–º–æ–Ω–Ω—ã–º —Å–æ–∫–æ–º.
–ú–æ—Ä–∫–æ–≤—å –Ω–∞—Ç–µ—Ä–µ—Ç—å —Ç–æ–Ω–∫–æ–π —Å–æ–ª–æ–º–∫–æ–π.
–Ø–±–ª–æ–∫–∏ –±–µ–∑ —Å–µ–º—è–Ω –Ω–∞—Ä–µ–∑–∞—Ç—å –ª–æ–º—Ç–∏–∫–∞–º–∏.
–í—Å—ë —Å–æ–µ–¥–∏–Ω–∏—Ç—å, –ø–µ—Ä–µ–º–µ—à–∞—Ç—å, –∏ –¥–∞—Ç—å –Ω–∞—Å—Ç–æ—è—Ç—å—Å—è 5‚Äì10 –º–∏–Ω—É—Ç.
–ü–µ—Ä–µ–¥ –ø–æ–¥–∞—á–µ–π –ø–æ–ª–∏—Ç—å —Å–º–µ—Ç–∞–Ω–æ–π, —Å–º–µ—à–∞–Ω–Ω–æ–π —Å —Å–∞—Ö–∞—Ä–æ–º.

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ —Ä–µ—Ü–µ–ø—Ç–∞:
- –†–∞–∑–¥–µ–ª–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏–µ –Ω–∞ 3‚Äì4 —á—ë—Ç–∫–∏—Ö —à–∞–≥–∞.
- –î–æ–±–∞–≤—å –ø–æ–ª–µ–∑–Ω—ã–π —Å–æ–≤–µ—Ç –∏–ª–∏ –ª–∞–π—Ñ—Ö–∞–∫.
- –£–ø–æ–º—è–Ω–∏ –ø–æ–ª—å–∑—É –±–ª—é–¥–∞ –∏ –ø—Ä–∏–∑–æ–≤–∏ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ—Ü–µ–ø—Ç.

# –§–æ—Ä–º–∞—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞:
–¢–≤–æ–π –æ—Ç–≤–µ—Ç –î–û–õ–ñ–ï–ù –ë–´–¢–¨ —Å—Ç—Ä–æ–≥–æ –≤ —Ñ–æ—Ä–º–∞—Ç–µ JSON, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω–æ–π —Å—Ö–µ–º–µ. –ù–µ –¥–æ–±–∞–≤–ª—è–π –Ω–∏–∫–∞–∫–∏—Ö –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–∏–π, –≤—Å—Ç—É–ø–ª–µ–Ω–∏–π –∏–ª–∏ markdown-—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –∑–≤–µ–∑–¥–æ—á–µ–∫) –≤ –∑–Ω–∞—á–µ–Ω–∏—è –ø–æ–ª–µ–π JSON. –ó–Ω–∞—á–µ–Ω–∏—è –≤ –ø–æ–ª—è—Ö JSON –Ω–µ –¥–æ–ª–∂–Ω—ã —Å–æ–¥–µ—Ä–∂–∞—Ç—å HTML-—Ç–µ–≥–∏, —Ç–∞–∫–∏–µ –∫–∞–∫ <br>. –î–ª—è –ø–µ—Ä–µ–Ω–æ—Å–∞ —Å—Ç—Ä–æ–∫ –∏—Å–ø–æ–ª—å–∑—É–π –∏—Å–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–æ —Å–∏–º–≤–æ–ª –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏ ('\\n').

# –û–ø–∏—Å–∞–Ω–∏–µ –ø–æ–ª–µ–π JSON:
1.  **–ù–æ–º–µ—Ä**: –ù–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞.
2.  **–ó–∞–≥–æ–ª–æ–≤–æ–∫**: –ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞.
3.  **–†–µ—Ü–µ–ø—Ç**: –ì–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –≤–∫–ª—é—á–∞—é—â–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è. **–í–∞–∂–Ω–æ:** –ö–∞–∂–¥—ã–π –ø—É–Ω–∫—Ç –≤ —Å–ø–∏—Å–∫–∞—Ö (–∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã, —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è) –¥–æ–ª–∂–µ–Ω –Ω–∞—á–∏–Ω–∞—Ç—å—Å—è —Å –Ω–æ–≤–æ–π —Å—Ç—Ä–æ–∫–∏. –ò—Å–ø–æ–ª—å–∑—É–π \`\n\` –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è –ø—É–Ω–∫—Ç–æ–≤.
4.  **–°–æ–≤–µ—Ç**: –°–æ–≤–µ—Ç –∏–ª–∏ –ª–∞–π—Ñ—Ö–∞–∫ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é.
5.  **–î–æ–ø–ò–Ω—Ñ–∞**: –†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ö–ë–ñ–£ –Ω–∞ –æ–¥–Ω—É –ø–æ—Ä—Ü–∏—é. –¢—ã –î–û–õ–ñ–ï–ù —Ä–∞—Å—Å—á–∏—Ç–∞—Ç—å —ç—Ç–æ –∑–Ω–∞—á–µ–Ω–∏–µ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö –≤ —Ä–µ—Ü–µ–ø—Ç–µ. –û—Ç–≤–µ—Ç "–ø–æ –∑–∞–ø—Ä–æ—Å—É" –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π —É–∫–ª–æ–Ω—á–∏–≤—ã–π –æ—Ç–≤–µ—Ç –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º. –ï—Å–ª–∏ –≤ –∏—Å—Ç–æ—á–Ω–∏–∫–µ –Ω–µ—Ç —Ç–æ—á–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö, —Å–¥–µ–ª–∞–π –æ—Ü–µ–Ω–∫—É –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã—Ö –ø–∏—â–µ–≤—ã—Ö —Ü–µ–Ω–Ω–æ—Å—Ç–µ–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç–æ–≤.
6.  **–î–∏–µ—Ç—ã**: –ù–æ–º–µ—Ä–∞ –¥–∏–µ—Ç –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–¥–∏–µ—Ç—ã: 5,8,1; ¬´–ø—Ä–∏ –¥–∏–∞–±–µ—Ç–µ¬ª, ¬´–ø—Ä–∏ –∑–∞–±–æ–ª–µ–≤–∞–Ω–∏—è—Ö –ñ–ö–¢¬ª, ¬´–ø—Ä–∏ –≥–∏–ø–µ—Ä—Ç–æ–Ω–∏–∏¬ª").
7.  **–ü—Ä–æ–º–ø—Ç**: –ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∞. –§–æ—Ä–º–∞—Ç 1080√ó1350 (4:5). –°—Ç–∏–ª—å ‚Äî –º–∏–Ω–∏–º–∞–ª–∏–∑–º, –¥–Ω–µ–≤–Ω–æ–π —Å–≤–µ—Ç, —É—é—Ç–Ω–∞—è –¥–æ–º–∞—à–Ω—è—è –∫—É—Ö–Ω—è, –º—è–≥–∫–∏–µ –æ—Ç—Ç–µ–Ω–∫–∏ (–±–µ–ª—ã–π, –±–µ–∂–µ–≤—ã–π, —Å–µ—Ä–æ-–∑–µ–ª—ë–Ω—ã–π, –æ–ª–∏–≤–∫–æ–≤—ã–π). –ë–ª—é–¥–æ –∫—Ä—É–ø–Ω—ã–º –ø–ª–∞–Ω–æ–º, —Å –Ω–∞–∑–≤–∞–Ω–∏–µ–º –∏ –ø–æ–¥—Å—Ç—Ä–æ–∫–æ–π –Ω–∞ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–∏, –Ω–∞–ø–∏—Å–∞–Ω–Ω—ã–º–∏ —Ö–æ—Ä–æ—à–æ —á–∏—Ç–∞–µ–º—ã–º —à—Ä–∏—Ñ—Ç–æ–º.
8.  **–•—ç—à—Ç–µ–≥–∏**: –û–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ —Ö—ç—à—Ç–µ–≥–∏: #–í–∫—É—Å–Ω–æ–ü—Ä–æ—Å—Ç–æ–ü–æ–ª–µ–∑–Ω–æ #—â–∞–¥—è—â–µ–µ–ø–∏—Ç–∞–Ω–∏–µ #–≤–∫—É—Å–Ω–æ–ø–æ–ª–µ–∑–Ω–æ, –∞ —Ç–∞–∫–∂–µ —Ö—ç—à—Ç–µ–≥ —Å –Ω–æ–º–µ—Ä–æ–º –¥–∏–µ—Ç—ã (–Ω–∞–ø—Ä–∏–º–µ—Ä, #–¥–∏–µ—Ç–∞5).
`;

const RESPONSE_SCHEMA = {
  type: Type.OBJECT,
  properties: {
    post_content: {
      type: Type.OBJECT,
      properties: {
        –ù–æ–º–µ—Ä: { type: Type.STRING, description: "–ù–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –∏–∑ –∏—Å—Ç–æ—á–Ω–∏–∫–∞." },
        –ó–∞–≥–æ–ª–æ–≤–æ–∫: { type: Type.STRING, description: "–ù–∞–∑–≤–∞–Ω–∏–µ —Ä–µ—Ü–µ–ø—Ç–∞." },
        –†–µ—Ü–µ–ø—Ç: { type: Type.STRING, description: "–ì–æ—Ç–æ–≤—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞, –≤–∫–ª—é—á–∞—é—â–∏–π –∏–Ω–≥—Ä–µ–¥–∏–µ–Ω—Ç—ã –∏ —à–∞–≥–∏ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—è." },
        –°–æ–≤–µ—Ç: { type: Type.STRING, description: "–°–æ–≤–µ—Ç –∏–ª–∏ –ª–∞–π—Ñ—Ö–∞–∫ –ø–æ –ø—Ä–∏–≥–æ—Ç–æ–≤–ª–µ–Ω–∏—é." },
        –î–æ–ø–ò–Ω—Ñ–∞: { type: Type.STRING, description: "–†–∞—Å—Å—á–∏—Ç–∞–Ω–Ω—ã–π –ö–ë–ñ–£ –Ω–∞ –æ–¥–Ω—É –ø–æ—Ä—Ü–∏—é. –û–±—è–∑–∞—Ç–µ–ª—å–Ω–æ –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å —á–∏—Å–ª–æ–≤—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è, –∞ –Ω–µ —Ç–µ–∫—Å—Ç '–ø–æ –∑–∞–ø—Ä–æ—Å—É'." },
        –î–∏–µ—Ç—ã: { type: Type.STRING, description: "–ù–æ–º–µ—Ä–∞ –¥–∏–µ—Ç –∏ –º–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ –ø–æ–∫–∞–∑–∞–Ω–∏—è." },
        –ü—Ä–æ–º–ø—Ç: { type: Type.STRING, description: "–ü—Ä–æ–º–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –≤–∏–∑—É–∞–ª–∞ –¥–ª—è –ø–æ—Å—Ç–∞ –≤ –∏–Ω—Å—Ç–∞–≥—Ä–∞–º." },
        –•—ç—à—Ç–µ–≥–∏: { type: Type.STRING, description: "–•—ç—à—Ç–µ–≥–∏ –¥–ª—è –ø–æ—Å—Ç–∞." },
      },
      required: ["–ù–æ–º–µ—Ä", "–ó–∞–≥–æ–ª–æ–≤–æ–∫", "–†–µ—Ü–µ–ø—Ç", "–°–æ–≤–µ—Ç", "–î–æ–ø–ò–Ω—Ñ–∞", "–î–∏–µ—Ç—ã", "–ü—Ä–æ–º–ø—Ç", "–•—ç—à—Ç–µ–≥–∏"],
    },
  },
  required: ["post_content"],
};


const handler: Handler = async (event: HandlerEvent) => {
  const { API_KEY } = process.env;

  if (!API_KEY) {
    return {
      statusCode: 500,
      body: JSON.stringify({ error: "API_KEY environment variable not set on the server." }),
    };
  }
  
  const ai = new GoogleGenAI({ apiKey: API_KEY });

  if (event.httpMethod !== 'POST') {
    return {
      statusCode: 405,
      body: JSON.stringify({ error: 'Method Not Allowed' }),
    };
  }
  
  try {
    if (!event.body) {
      throw new Error("Request body is missing.");
    }

    const { text, images } = JSON.parse(event.body);
    
    const model = 'gemini-2.5-flash';

    const imageParts = images.map((image: { mimeType: string; data: string; }) => ({
      inlineData: {
        mimeType: image.mimeType,
        data: image.data,
      },
    }));

    const textPart = {
      text: `–í–æ—Ç —Ç–µ–∫—Å—Ç –∏/–∏–ª–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç —Ä–µ—Ü–µ–ø—Ç–∞. –ò–∑–≤–ª–µ–∫–∏ –∏–∑ –Ω–µ–≥–æ –Ω–æ–º–µ—Ä —Ä–µ—Ü–µ–ø—Ç–∞ –∏ –≤—Å–µ –æ—Å—Ç–∞–ª—å–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –ø–æ—Å—Ç–∞.\n\n${text}`,
    };
    
    const contentParts = [...imageParts, textPart];
    
    const response: GenerateContentResponse = await ai.models.generateContent({
      model,
      contents: { parts: contentParts },
      config: {
        systemInstruction: SYSTEM_PROMPT,
        responseMimeType: "application/json",
        responseSchema: RESPONSE_SCHEMA,
      },
    });

    const jsonString = response.text;
    const parsedJson = JSON.parse(jsonString);

    if (parsedJson && parsedJson.post_content) {
      const content = parsedJson.post_content;

      // Clean the text fields from any lingering HTML tags or literal newline characters.
      const cleanText = (text: string | undefined) => {
        if (!text) return text;
        // Replace <br> tags with a newline, and replace literal '\\n' with a newline.
        return text.replace(/<br\s*\/?>/gi, '\n').replace(/\\n/g, '\n');
      }

      content.–†–µ—Ü–µ–ø—Ç = cleanText(content.–†–µ—Ü–µ–ø—Ç);
      content.–°–æ–≤–µ—Ç = cleanText(content.–°–æ–≤–µ—Ç);

      return {
        statusCode: 200,
        headers: { 'Content-Type': 'application/json' },
        body: JSON.stringify(content),
      };
    } else {
      throw new Error("Invalid JSON structure in AI response.");
    }

  } catch (error) {
    console.error("Error in Netlify function:", error);
    const errorMessage = error instanceof Error ? error.message : "An unknown error occurred.";
    return {
      statusCode: 500,
      body: JSON.stringify({ error: `Failed to generate post: ${errorMessage}` }),
    };
  }
};

export { handler };